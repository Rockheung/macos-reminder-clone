{"version":3,"sources":["logo.svg","TextInput.js","TodoItems.js","Searchbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TextInput","state","focused","inputValue","_this","props","workName","done","pStyle","borderColor","backgroundColor","boxShadow","doneStyle","fontStyle","textDecorationLine","fontWeight","componentDidMount","onChange","e","setState","target","value","onFocusIn","focusing","idx","onDoubleClick","reset","savefn","onFocusOut","setStyle","s","Object","assign","react_default","a","createElement","full","Input","className","this","style","onFocus","onBlur","placeholder","Component","TodoItems","list","map","i","src_TextInput","key","name","join","updatefn","addfn","Searchbar","WebkitAlignItems","alignItems","App","todolists","focusedIdx","theme","bulmaTheme","addToDoList","length","todolist","items","concat","toConsumableArray","updateToDoList","newState","objectSpread","splice","addToDoListItem","listName","alert","todolistitems","push","updateToDoListItem","listIdx","arguments","undefined","changeFocusing","Head","Body","Column","size","src_TodoItems","src_Searchbar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uNCiGzBC,6MA7FbC,MAAQ,CACNC,SAAS,EACTC,WAAYC,EAAKC,MAAMC,SAAWF,EAAKC,MAAMC,SAAW,GACxDC,KAAMH,EAAKC,MAAME,QAGnBC,OAAS,CACPC,YAAa,cACbC,gBAAiB,cACjBC,UAAW,UAGbC,UAAY,CACVC,UAAW,SACXC,mBAAoB,eACpBC,WAAY,SAGdC,kBAAoB,eAIpBC,SAAW,SAACC,GACLd,EAAKH,MAAMM,MACdH,EAAKe,SAAS,CACZhB,WAAYe,EAAEE,OAAOC,WAK3BC,UAAY,SAACJ,GACPd,EAAKC,MAAMkB,UACbnB,EAAKC,MAAMkB,SAASnB,EAAKC,MAAMmB,KAE5BpB,EAAKH,MAAMM,MACdH,EAAKe,SAAS,CACZjB,SAAS,OAKfuB,cAAgB,WACTrB,EAAKC,MAAMqB,QACdtB,EAAKC,MAAMsB,OAAOvB,EAAKH,MAAME,WAAYC,EAAKC,MAAMmB,KAAMpB,EAAKC,MAAME,MACrEH,EAAKe,SAAS,CACZZ,MAAOH,EAAKH,MAAMM,KAClBL,SAAS,QAKf0B,WAAa,SAACV,GAEZd,EAAKC,MAAMsB,OAAOvB,EAAKH,MAAME,WAAYC,EAAKC,MAAMmB,KACpDpB,EAAKe,SAAS,CACZjB,SAAS,IAEPE,EAAKC,MAAMqB,OACbtB,EAAKe,SAAS,CACZhB,WAAY,QAKlB0B,SAAW,WACT,IAAIC,EAAI,GAOR,OANI1B,EAAKH,MAAMM,OAASH,EAAKC,MAAMqB,OACjCK,OAAOC,OAAOF,EAAG1B,EAAKQ,WAEnBR,EAAKH,MAAMC,SACd6B,OAAOC,OAAOF,EAAG1B,EAAKI,QAEjBsB,2EAIP,OACEG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,KAAKC,MAAN,CACEC,UAAWC,KAAKtC,MAAMC,QAAU,2BAA6B,GAC7DsC,MAAOD,KAAKV,WACZZ,SAAUsB,KAAKtB,SACfwB,QAASF,KAAKjB,UACdoB,OAAQH,KAAKX,WACbH,cAAec,KAAKd,cACpBJ,MAAOkB,KAAKtC,MAAME,WAClBwC,YAAY,wBAvFEC,aCmCTC,EArBG,SAACxC,GACjB,OACE4B,EAAAC,EAAAC,cAAA,MAAIG,UAAU,eACXjC,EAAMyC,KAAKC,IAAI,SAACD,EAAKE,GAAN,OACdf,EAAAC,EAAAC,cAACc,EAAD,CACEC,IAAK,CAACJ,EAAKK,KAAKH,GAAGI,KAAK,KACxB5B,IAAKwB,EACLzC,KAAMuC,EAAKvC,KACXD,SAAUwC,EAAKK,KACfxB,OAAQtB,EAAMgD,SACd9B,SAAUlB,EAAMkB,aAGpBU,EAAAC,EAAAC,cAACc,EAAD,CACEtB,OAAQtB,EAAMiD,MACd5B,OAAK,MCVE6B,mLAhBX,OACEtB,EAAAC,EAAAC,cAAA,OAAKK,MAAO,CAAEgB,iBAAiB,WACnBC,WAAW,aACrBxB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACbL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,0BACXL,EAAAC,EAAAC,cAAA,SAAOG,UAAU,QAAQK,YAAY,WACrCV,EAAAC,EAAAC,cAAA,QAAMG,UAAU,yBACdL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,6BATHM,aC6ITc,6MA9HbzD,MAAQ,CACN0D,UAAW,GACXC,WAAY,KACZC,MAAO,CAACzD,EAAKC,MAAMyD,eAGrBC,YAAc,SAACzD,GACb,GAAwB,IAApBA,EAAS0D,OAAc,CACzB,IAAIC,EAAW,CACbd,KAAM7C,GAAsB,WAC5B4D,MAAO,IAET9D,EAAKe,SAAS,CACZwC,UAAS,GAAAQ,OAAApC,OAAAqC,EAAA,EAAArC,CAAM3B,EAAKH,MAAM0D,WAAjB,CAA4BM,IACrCL,WAAYxD,EAAKH,MAAM0D,UAAUK,aAKvCK,eAAiB,SAAC/D,EAAUkB,GAE1B,GAAiB,KAAblB,EAAiB,CACnB,IAAIgE,EAAQvC,OAAAwC,EAAA,EAAAxC,CAAA,GAAO3B,EAAKH,OACxBqE,EAASX,UAAUa,OAAOhD,EAAI,GAC9BpB,EAAKe,SAALY,OAAAwC,EAAA,EAAAxC,CAAA,GAAkBuC,SACb,GAAIhE,IAAaF,EAAKH,MAAM0D,UAAUnC,GAAK2B,KAAM,CACtD,IAAImB,EAAQvC,OAAAwC,EAAA,EAAAxC,CAAA,GAAO3B,EAAKH,OACxBqE,EAASX,UAAUnC,GAAK2B,KAAO7C,EAC/BF,EAAKe,SAALY,OAAAwC,EAAA,EAAAxC,CAAA,GAAkBuC,QAKtBG,gBAAkB,SAACC,GACjB,IAAIlD,EAAMpB,EAAKH,MAAM2D,WACrB,GAAY,OAARpC,EACFmD,MAAM,qCACD,GAAwB,IAApBD,EAASV,OAAc,CAChC,IAAIM,EAAQvC,OAAAwC,EAAA,EAAAxC,CAAA,GAAO3B,EAAKH,OACpB2E,EAAgB,CAClBzB,KAAMuB,GAAsB,WAC5BnE,MAAM,GAER+D,EAASX,UAAUnC,GAAK0C,MAAMW,KAAKD,GACnCxE,EAAKe,SAALY,OAAAwC,EAAA,EAAAxC,CAAA,GAAkBuC,QAKtBQ,mBAAqB,SAACJ,EAAUlD,GAC9B,IAAIuD,EAAU3E,EAAKH,MAAM2D,WACzB,GAAiB,KAAbc,EAAiB,CACnB,IAAIJ,EAAQvC,OAAAwC,EAAA,EAAAxC,CAAA,GAAO3B,EAAKH,OACxBqE,EAASX,UAAUoB,GAASb,MAAMM,OAAOhD,EAAI,GAC7CpB,EAAKe,SAALY,OAAAwC,EAAA,EAAAxC,CAAA,GAAkBuC,SAEf,GAAII,IAAatE,EAAKH,MAAM0D,UAAUoB,GAASb,MAAM1C,GAAK2B,KAAM,CACnE,IAAImB,EAAQvC,OAAAwC,EAAA,EAAAxC,CAAA,GAAO3B,EAAKH,OACxBqE,EAASX,UAAUoB,GAASb,MAAM1C,GAAK2B,KAAOuB,EAC9CtE,EAAKe,SAALY,OAAAwC,EAAA,EAAAxC,CAAA,GAAkBuC,IAEpB,IAAIU,UAAAhB,QAAA,IAAAgB,UAAAhB,OAAA,GAAa,EAAG,CAClB,IAAIM,EAAQvC,OAAAwC,EAAA,EAAAxC,CAAA,GAAO3B,EAAKH,OACxBqE,EAASX,UAAUoB,GAASb,MAAM1C,GAAKjB,KAAvCyE,UAAAhB,QAAA,OAAAiB,EAAAD,UAAA,GACA5E,EAAKe,SAALY,OAAAwC,EAAA,EAAAxC,CAAA,GAAkBuC,QAKtBY,eAAiB,SAAC1D,GAChB,IAAI8C,EAAQvC,OAAAwC,EAAA,EAAAxC,CAAA,GAAO3B,EAAKH,OACxBqE,EAASV,WAAapC,EACtBpB,EAAKe,SAALY,OAAAwC,EAAA,EAAAxC,CAAA,GAAkBuC,6EAIlB,OACErC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAME,UAAS,oBAAA6B,OAAsB5B,KAAKtC,MAAM4D,QAC9C5B,EAAAC,EAAAC,cAACC,EAAA,KAAK+C,KAAN,KACElD,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQE,UAAU,UAChBL,EAAAC,EAAAC,cAACC,EAAA,UAAD,KACEH,EAAAC,EAAAC,cAAA,MAAIG,UAAU,gDAAd,qBAINL,EAAAC,EAAAC,cAACC,EAAA,KAAKgD,KAAN,CAAW5C,MAAO,CAACgB,iBAAiB,QACjBC,WAAW,UAC5BxB,EAAAC,EAAAC,cAACC,EAAA,UAAD,CAAWE,UAAU,aACnBL,EAAAC,EAAAC,cAACC,EAAA,QAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,QAAQiD,OAAT,CAAgBC,KAAK,aACnBrD,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAKE,UAAU,+BACbL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,wBAAd,aACAL,EAAAC,EAAAC,cAACoD,EAAD,CACEzC,KAAMP,KAAKtC,MAAM0D,UACjBpC,SAAUgB,KAAK2C,eACf5B,MAAOf,KAAKwB,YACZV,SAAUd,KAAK8B,iBAEjBpC,EAAAC,EAAAC,cAACqD,EAAD,QAGJvD,EAAAC,EAAAC,cAACC,EAAA,QAAQiD,OAAT,KACEpD,EAAAC,EAAAC,cAACC,EAAA,IAAD,KACEH,EAAAC,EAAAC,cAAA,MAAIG,UAAU,wBAAd,kBAAoDL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,yBAAqD,OAA1BC,KAAKtC,MAAM2D,WACtGrB,KAAKtC,MAAM0D,UAAUpB,KAAKtC,MAAM2D,YAAYT,KAC5C,iCAEJlB,EAAAC,EAAAC,cAACoD,EAAD,CACEzC,KAAkC,OAA1BP,KAAKtC,MAAM2D,WACXrB,KAAKtC,MAAM0D,UAAUpB,KAAKtC,MAAM2D,YAAYM,MAC5C,GACRZ,MAAOf,KAAKkC,gBACZpB,SAAUd,KAAKuC,mCAnHnBlC,aCLE6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,CAAKlC,WAAY,KAAOmC,SAASC,eAAe,SD0H1D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.062c6828.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport { Form } from 'react-bulma-components/full'\r\n\r\nclass TextInput extends Component {\r\n  state = {\r\n    focused: false,\r\n    inputValue: this.props.workName ? this.props.workName : '',\r\n    done: this.props.done\r\n  }\r\n\r\n  pStyle = {\r\n    borderColor: \"transparent\",\r\n    backgroundColor: \"transparent\",\r\n    boxShadow: \"none\"\r\n  }\r\n\r\n  doneStyle = {\r\n    fontStyle: \"italic\",\r\n    textDecorationLine: \"line-through\",\r\n    fontWeight: \"100\"\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    // console.dir(this.props)\r\n  }\r\n  \r\n  onChange = (e) => {\r\n    if (!this.state.done) {\r\n      this.setState({\r\n        inputValue: e.target.value\r\n      })\r\n    }\r\n  }\r\n\r\n  onFocusIn = (e) => {\r\n    if (this.props.focusing) {\r\n      this.props.focusing(this.props.idx)\r\n    }\r\n    if (!this.state.done ) {\r\n      this.setState({\r\n        focused: true\r\n      })\r\n    }\r\n  }\r\n\r\n  onDoubleClick = () => {\r\n    if (!this.props.reset) {\r\n      this.props.savefn(this.state.inputValue, this.props.idx, !this.props.done)\r\n      this.setState({\r\n        done: !this.state.done,\r\n        focused: false\r\n      })\r\n    }    \r\n  }\r\n\r\n  onFocusOut = (e) => {\r\n    // Should update App's state when onBlur\r\n    this.props.savefn(this.state.inputValue, this.props.idx)\r\n    this.setState({\r\n      focused: false\r\n    })\r\n    if (this.props.reset) {\r\n      this.setState({\r\n        inputValue: ''\r\n      })\r\n    }\r\n  }\r\n\r\n  setStyle = () => {\r\n    let s = {}\r\n    if (this.state.done && !this.props.reset) {\r\n      Object.assign(s, this.doneStyle)\r\n    }\r\n    if (!this.state.focused) {\r\n      Object.assign(s, this.pStyle)\r\n    }\r\n    return s\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <Form.Input\r\n          className={this.state.focused ? \"has-background-white-ter\" : \"\"}\r\n          style={this.setStyle()}\r\n          onChange={this.onChange}\r\n          onFocus={this.onFocusIn}\r\n          onBlur={this.onFocusOut}\r\n          onDoubleClick={this.onDoubleClick}\r\n          value={this.state.inputValue}\r\n          placeholder=\"Add one ...\"\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TextInput\r\n\r\n\r\n/**/\r\n\r\n          ","import React, { Component } from 'react'\r\nimport TextInput from './TextInput'\r\n\r\nimport { Columns,\r\n         Section,\r\n         Container,\r\n         Hero,\r\n         Navbar,\r\n         Heading\r\n        } from 'react-bulma-components/full'\r\n\r\n// const TodoItem = (props) => {\r\n//   return (\r\n//     <li>{`${props.work}`}</li>\r\n//   )\r\n// }\r\n\r\nconst TodoItems = (props) => {\r\n  return (\r\n    <ul className=\"input-field\">\r\n      {props.list.map((list,i) => (\r\n        <TextInput\r\n          key={[list.name,i].join('#')}\r\n          idx={i}\r\n          done={list.done}\r\n          workName={list.name}\r\n          savefn={props.updatefn}\r\n          focusing={props.focusing}\r\n        />\r\n      ))}\r\n      <TextInput\r\n        savefn={props.addfn}\r\n        reset\r\n      />\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default TodoItems","import React, { Component } from 'react'\r\nimport { Form } from 'react-bulma-components/full'\r\n\r\n\r\nclass Searchbar extends Component {\r\n  render(){\r\n    return (\r\n      <div style={{ WebkitAlignItems:\"flex-end\",\r\n                  alignItems:\"flex-end\"}}>\r\n        <div className=\"field\">\r\n          <p className=\"control has-icons-left\">\r\n            <input className=\"input\" placeholder=\"Search\"></input>\r\n            <span className=\"icon is-small is-left\">\r\n              <i className=\"fas fa-search\"></i>\r\n            </span>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Searchbar","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport 'react-bulma-components/dist/react-bulma-components.min.css';\nimport { Columns,\n         Section,\n         Container,\n         Hero,\n         Navbar,\n         Heading,\n         Box\n        } from 'react-bulma-components/full'\n\nimport TodoItems from './TodoItems'\nimport Searchbar from './Searchbar'\n\nclass App extends Component {\n  // state = this.props.init;\n  state = {\n    todolists: [], // [todolist]\n    focusedIdx: null, // focused todolist index\n    theme: [this.props.bulmaTheme] // [\"danger\",\"primary\",...]\n  }\n\n  addToDoList = (workName) => {\n    if (workName.length !== 0) {\n      let todolist = {\n        name: workName ? workName : 'new list',\n        items: [] // [todolistitems]\n      }\n      this.setState({\n        todolists: [...this.state.todolists, todolist],\n        focusedIdx: this.state.todolists.length\n      })\n    }\n  }\n\n  updateToDoList = (workName, idx) => {\n    // this.changeFocusing(idx);\n    if (workName === '') {\n      let newState = {...this.state}\n      newState.todolists.splice(idx,1)\n      this.setState({...newState})\n    } else if (workName !== this.state.todolists[idx].name) {\n      let newState = {...this.state}\n      newState.todolists[idx].name = workName\n      this.setState({...newState})\n    }\n    // this.forceUpdate()\n  }\n\n  addToDoListItem = (listName) => {\n    let idx = this.state.focusedIdx;\n    if (idx === null) {\n      alert(\"Hey, your todolist is empty!\")\n    } else if (listName.length !== 0) {\n      let newState = {...this.state};\n      let todolistitems = {\n        name: listName ? listName : 'new item',\n        done: false\n      }\n      newState.todolists[idx].items.push(todolistitems)\n      this.setState({...newState})\n    }\n    // this.forceUpdate()\n  }\n\n  updateToDoListItem = (listName, idx, ...done) => {\n    let listIdx = this.state.focusedIdx;\n    if (listName === '') {\n      let newState = {...this.state};\n      newState.todolists[listIdx].items.splice(idx,1)\n      this.setState({...newState})\n    }\n    else if (listName !== this.state.todolists[listIdx].items[idx].name) {\n      let newState = {...this.state};\n      newState.todolists[listIdx].items[idx].name = listName\n      this.setState({...newState})\n    }\n    if (done.length >0) {\n      let newState = {...this.state};\n      newState.todolists[listIdx].items[idx].done = done[0]\n      this.setState({...newState})\n    }\n    // this.forceUpdate()\n  }\n\n  changeFocusing = (idx) => {\n    let newState = {...this.state}\n    newState.focusedIdx = idx;\n    this.setState({...newState})\n  }\n\n  render() {\n    return (\n      <div>\n        <Hero className={`is-fullheight is-${this.state.theme}`}>\n          <Hero.Head>\n            <Navbar className=\"navbar\">\n              <Container>\n                <h1 className=\"title has-text-centered has-text-weight-bold\" >Reminder Clone</h1>\n              </Container>\n            </Navbar>\n          </Hero.Head>\n          <Hero.Body style={{WebkitAlignItems:\"unset\",\n                             alignItems:\"unset\"}}>\n            <Container className=\"is-fullhd\">\n              <Columns>\n                <Columns.Column size=\"one-third\">\n                  <Box className=\"has-background-grey-lighter\">\n                    <h2 className=\"has-text-weight-bold\">ToDoLists</h2>\n                    <TodoItems\n                      list={this.state.todolists}\n                      focusing={this.changeFocusing}\n                      addfn={this.addToDoList}\n                      updatefn={this.updateToDoList}\n                    />\n                    <Searchbar/>\n                  </Box>\n                </Columns.Column>\n                <Columns.Column>\n                  <Box>\n                    <h2 className=\"has-text-weight-bold\">ToDoListItems: <span className=\"has-text-weight-light\">{ (this.state.focusedIdx !== null)\n                      ? this.state.todolists[this.state.focusedIdx].name\n                      : 'Nothing to do! You\\'re free!!'\n                      }</span></h2>\n                    <TodoItems\n                      list={ (this.state.focusedIdx !== null)\n                            ? this.state.todolists[this.state.focusedIdx].items\n                            : [] }\n                      addfn={this.addToDoListItem}\n                      updatefn={this.updateToDoListItem}\n                    />\n                  </Box>\n                </Columns.Column>\n              </Columns>\n            </Container>\n          </Hero.Body>\n        </Hero>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App bulmaTheme={{}}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}